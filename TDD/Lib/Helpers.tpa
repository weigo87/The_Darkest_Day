////=============================================================================
//DEFINE_ACTION_MACRO ForceClearTempFolder
//BEGIN
//	ACTION_FOR_EACH var IN d baf 2da BEGIN
//			ACTION_BASH_FOR ~%workspace%/_%aComp%~ ~^.+\.%var%$~ BEGIN
//				DELETE +  ~%BASH_FOR_FILESPEC%~
//			END
//	END
//	ACTION_FOR_EACH var IN tra mrk BEGIN
//			ACTION_BASH_FOR ~%workspace%/Translations~ ~^.+\.%var%$~ BEGIN
//				DELETE +  ~%BASH_FOR_FILESPEC%~
//			END
//	END
//END
//
//
////=============================================================================
//DEFINE_ACTION_FUNCTION DeleteTempFolder
//	STR_VAR aComp = ~~
//BEGIN
//	LAM ForceClearTempFolder
//	LAF REMOVE_DIRECTORY STR_VAR dir_name = EVAL ~%workspace%/_%aComp%~ END
//	LAF REMOVE_DIRECTORY STR_VAR dir_name = EVAL ~%workspace%/Translations~ END
//	LAF REMOVE_DIRECTORY STR_VAR dir_name = EVAL ~%workspace%~ END
//END

//=============================================================================
DEFINE_ACTION_FUNCTION Accept STR_VAR sender = ~~ target = ~~
BEGIN	
	ACTION_IF NOT ~%sender%~ STRING_EQUAL_CASE ~%target%~ BEGIN
		FAIL ~!!!!! Accept Error: %sender% vs %target% !!!!!, to continue, please press Enter~
		ACTION_READLN  ~pause~
		//COPY_EXISTING ~shadowFramework_Error.txt~ ~%MOD_FOLDER%/shadowFramework_Error.txt~	
	END
	
END

//=============================================================================
//replaces item in a cre with another item. Variables ~old_item~, ~new_item~ required
DEFINE_PATCH_MACRO ~REPLACE_CRE_ITEM~ BEGIN
  LAUNCH_PATCH_FUNCTION ~FJ_CRE_VALIDITY~ RET valid = valid END
  PATCH_IF (valid) BEGIN
    READ_SHORT 0x02c0 ___#itm_num
    READ_LONG  0x02bc ___#itm_off
    WHILE (___#itm_num > 0) BEGIN
      SET ___#itm_num = (___#itm_num - 1)
      READ_ASCII (___#itm_off + (___#itm_num * 0x14)) ~item~
      PATCH_IF (~%item%~ STRING_MATCHES_REGEXP ~%old_item%~ = 0) BEGIN
        WRITE_EVALUATED_ASCII (___#itm_off + (___#itm_num * 0x14)) ~%new_item%~ #8

        //charges:
        WRITE_SHORT (___#itm_off + ___#itm_num * 0x14 + 0xa) charges1
        WRITE_SHORT (___#itm_off + ___#itm_num * 0x14 + 0xc) charges2
        WRITE_SHORT (___#itm_off + ___#itm_num * 0x14 + 0xe) charges3

        //flags
        SET ___#flags_to_set = 0
        PATCH_IF (~%flags%~ STRING_CONTAINS_REGEXP ~identified~ = 0) BEGIN
          SET ___#flags_to_set = (___#flags_to_set BOR 0b00000001)
        END
        PATCH_IF (~%flags%~ STRING_CONTAINS_REGEXP ~unstealable~ = 0) BEGIN
          SET ___#flags_to_set = (___#flags_to_set BOR 0b00000010)
        END
        PATCH_IF (~%flags%~ STRING_CONTAINS_REGEXP ~stolen~ = 0) BEGIN
          SET ___#flags_to_set = (___#flags_to_set BOR 0b00000100)
        END
        PATCH_IF (~%flags%~ STRING_CONTAINS_REGEXP ~undroppable~ = 0) BEGIN
          SET ___#flags_to_set = (___#flags_to_set BOR 0b00001000)
        END
        WRITE_LONG (___#itm_off + ___#itm_num * 0x14 + 0x10) ___#flags_to_set

      END
    END
  END
  SET charges1 = 0
  SET charges2 = 0
  SET charges3 = 0
  SPRINT flags ~%___#nil%~
END

//=============================================================================
DEFINE_PATCH_FUNCTION ~REPLACE_CRE_ITEM~
  INT_VAR charges1 = 0
          charges2 = 0
          charges3 = 0
  STR_VAR flags = ~~
          old_item = ~~
          new_item = ~~
BEGIN
  LAUNCH_PATCH_MACRO ~REPLACE_CRE_ITEM~
END
			
//=============================================================================
DEFINE_PATCH_MACRO ~CLEAR_ARRAY~
BEGIN
	CLEAR_ARRAY x_coord
	CLEAR_ARRAY y_coord
END

//=============================================================================
DEFINE_PATCH_MACRO ~DELETE_EXISTING_ANIMATIONS~ // to delete torches, candles ...
BEGIN
	// offset to rest encounters and songlist is 0. Adding empty table
	PATCH_IF LONG_AT 0xc0 = 0 BEGIN
		WRITE_LONG 0xc0 BUFFER_LENGTH
		INSERT_BYTES BUFFER_LENGTH 0xe4
	END
	PATCH_IF LONG_AT 0xbc = 0 BEGIN
		WRITE_LONG 0xbc BUFFER_LENGTH
		INSERT_BYTES BUFFER_LENGTH 0x90
	END
	GET_OFFSET_ARRAY animation_array ARE_V10_ANIMATIONS
	PATCH_PHP_EACH animation_array AS animation_num => animation_offset BEGIN
		READ_SHORT animation_offset+0x20 animation_pos_x
		READ_SHORT animation_offset+0x22 animation_pos_y
		PATCH_IF ((~%animation_pos_x%~ = $x_coord("%index%")) AND (~%animation_pos_y%~ =  $y_coord("%index%"))) BEGIN
			LPF fj_are_structure INT_VAR fj_delete_mode = animation_num STR_VAR fj_structure_type = animation END
		END
	END
END

//=============================================================================
ACTION_DEFINE_ASSOCIATIVE_ARRAY turn_off_at_night BEGIN // turn off sleeping animals at night
		bird => 1
		eagle => 1
		vultur => 1
		seagul => 1
		butrfly => 1
	END

//=============================================================================
DEFINE_PATCH_FUNCTION DELETE_ITMSPL_HEADER_NUM
  INT_VAR header_type = 0    // -1 for all headers, otherwise match type
          min_level   = "-1" // -1 for all headers, otherwise match
		  delete_abil_num = "-1" // -1 for all headers, otherwise match
          header_length = 0x38
BEGIN

    READ_LONG   0x64 abil_off
    READ_SHORT  0x68 abil_num
    READ_LONG   0x6a fx_off
    READ_SHORT  0x70 fx_num
    SET fx_delta = 0
    FOR (index = 0 ; index < abil_num ; ++index) BEGIN // looks for default ability header
      READ_BYTE   (abil_off +        (index * header_length)) type_file
      READ_SHORT  (abil_off + 0x10 + (index * header_length)) min_level_file
      PATCH_IF (((header_type = type_file) OR (header_type < 0)) AND
                ((min_level = min_level_file) OR (min_level < 0)) AND
				((delete_abil_num = index) OR (delete_abil_num < 0))) BEGIN // default ability check
        READ_SHORT  (0x1e + abil_off + (index * header_length)) abil_fx_num
        READ_SHORT  (0x20 + abil_off + (index * header_length)) abil_fx_idx
        DELETE_BYTES (fx_off + (0x30 * (abil_fx_idx - fx_delta))) (0x30 * abil_fx_num) // deletes all associated effects
        DELETE_BYTES (abil_off + (index * header_length)) header_length                // deletes ability itself
        SET fx_delta = (fx_delta + abil_fx_num)
        SET abil_num = (abil_num - 1)
        SET index = (index - 1)
        SET fx_off = (fx_off - header_length)
      END ELSE BEGIN // if non-matched ability, need to adjust effect indices
        READ_SHORT  (0x20 + abil_off + (index * header_length)) abil_fx_idx
        WRITE_SHORT (0x20 + abil_off + (index * header_length)) (abil_fx_idx - fx_delta)
      END
    END
    WRITE_SHORT  0x68 abil_num
    WRITE_LONG   0x6a fx_off

END